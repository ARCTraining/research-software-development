---
title: "Research code workflow"
---

::: {.panel-tabset group="workflow"}
## Single directory project

If you select this tab, the instructions below will show information relevant to organising your project in a single project folder: this folder will contain all of your code, application, analysis, figures, and notes.

## Dual directory project

If you select this tab, the instructions below will show information relevant to organising your project in two project folders: one folder for your core code as an installable package, the other containing the application of this code, analysis, notes, figures etc. 

:::

## Part One: building the core code

### 1. Brainstorm and gather requirements

### 2. Create your project directory structure in a repository

<label>Project name: &nbsp; <input id="name" value="example_name" type="text" placeholder="example_name" pattern="[a-z0-9_]*" style="font-family:monospace;"></label>

:::::{.callout-note collapse="true"}
## View commands to create structure

:::: {.panel-tabset group="workflow"}
## Single directory project


<pre id="output_a" style="background-color: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 4px solid #007acc;"></pre>


## Dual directory project


<pre id="output" style="background-color: #f8f9fa; padding: 10px; border-radius: 5px; border-left: 4px solid #007acc;"></pre>


<script>
const name = document.getElementById('name');

function updateOutput() {
    sanitized = (name.value || "").replace(/[^a-z0-9_]/g, "")
    output.textContent = 
`mkdir -p tests src/${sanitized}
touch {pyproject.toml,environment.yml,README.md,CITATION.cff,src/${sanitized}/__init__.py,src/${sanitized}/example.py}
echo -e 'import sys\nsys.path.append("src")' > tests/__init__.py
echo -e 'name: ${sanitized}-env

channels:
  - conda-forge
  - nodefaults

dependencies:
  - python=3.13
  - pytest
  - blackd
  - isort

  # remove/modify these as needed
  - numpy
  - pandas

  # keep this to install your Python package locally
  - pip
  - pip:
    - --editable .' > environment.yml
echo -e '[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "${sanitized}"
version = "0.1.0"
description = "Brief description"
authors = [{name = "Your Name"}]
requires-python = ">=3.13"

[tool.setuptools.packages.find]
where = ["src"]' > pyproject.toml`

   output_a.textContent = 
`mkdir -p tests src/${sanitized} data/raw data/results notebooks reports
touch {pyproject.toml,environment.yml,README.md,CITATION.cff,src/${sanitized}/__init__.py,src/${sanitized}/example.py}
echo -e 'import sys\nsys.path.append("src")' > tests/__init__.py
echo -e 'name: ${sanitized}-env

channels:
  - conda-forge
  - nodefaults

dependencies:
  - python=3.13
  - pytest
  - blackd
  - isort

  # remove/modify these as needed
  - numpy
  - pandas

  # keep this to install your Python package locally
  - pip
  - pip:
    - --editable .' > environment.yml
echo -e '[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "${sanitized}"
version = "0.1.0"
description = "Brief description"
authors = [{name = "Your Name"}]
requires-python = ">=3.13"

[tool.setuptools.packages.find]
where = ["src"]' > pyproject.toml`
    }

name.addEventListener('input', updateOutput);
updateOutput();

</script>


::::
:::::

### 3. Create a development environment

```bash
conda env create -f environment.yml
```

```bash
conda env update --file environment.yaml --prune
```

### 4. Write your pseudocode, comments, and code 

### 5. Write a test suite

### 6. Write documentation

::: {.panel-tabset group="workflow"}
## Single directory project

Content

## Dual directory project

Content - including a `pyproject.toml`
:::

## Part two: using the core code

### 1. Setting up your folder structure

::: {.panel-tabset group="workflow"}
## Single directory project

Content - You've already done this bit

## Dual directory project

Content
:::

### 2. Creating a research environment

::: {.panel-tabset group="workflow"}
## Single directory project

Content

## Dual directory project

Content
:::

### 3. Do your research!

Advice on imports, advice on jupyter notebooks

::: {.panel-tabset group="workflow"}
## Single directory project

Content

## Dual directory project

Content
:::

Advice on updating core code, and re-running all output

### 4. Export your environment

### 5. Create a release, synced with zenodo